##############################################################                                                                                                                         
# Code used for testing SVM for malware classification, as comparison to the custom Neural Network architecture
# Needed data: malware instruction sequences, PE Header data, ground truth training labels                                                                                            
# Result: Model that assigns a label to previously unknown malware samples                                                                                                            
#############################################################    

from __future__ import print_function

import os
import sys
import pickle

import numpy as np

from sklearn import preprocessing, svm
from sklearn.cross_validation import StratifiedShuffleSplit
from sklearn.metrics import confusion_matrix, classification_report

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

class SVM:
    def __init__(self, result_path):
        self.result_path = result_path

        self.X_int = pickle.load(open(os.path.join(self.result_path, 'malware_int_features_matrix.p'), "rb"))
        self.X_int = preprocessing.MinMaxScaler().fit_transform(self.X_int)
        self.X_dll_func = pickle.load(open(os.path.join(self.result_path, 'malware_boolean_features_matrix.p'), "rb"))
        self.X_asm = pickle.load(open(os.path.join(self.result_path, 'malware_asm_bagOfWords.p'), "rb"))
        self.y = np.genfromtxt(os.path.join(self.result_path,'dbscan_labels.csv'), dtype=np.int)

        self.X_train_int, self.X_test_int = self.X_int[0:17037], self.X_int[17038:22693]
        self.X_train_asm, self.X_test_asm = self.X_asm[0:17037], self.X_asm[17038:22693]
        self.X_train_dll_func, self.X_test_dll_func = self.X_dll_func[0:17037], self.X_dll_func[17038:22693]

        self.X_train = np.concatenate((self.X_train_int, self.X_train_dll_func, self.X_train_asm), axis=1)
        self.X_test = np.concatenate((self.X_test_int, self.X_test_dll_func, self.X_test_asm), axis=1)

        self.X = np.concatenate((self.X_int[0:22693], self.X_dll_func[0:22693], self.X_asm[0:22693]), axis=1)
        self.y = self.y[0:22693]

        self.y_train, self.y_test = self.y[0:17037], self.y[17038:22693]

    def svm_classifier_cv(self):
        cv_outer = StratifiedShuffleSplit(self.y, n_iter=5, test_size=0.4, random_state=0)
        svc_model = svm.SVC(decision_function_shape='ovr')
        i = 0
        for training_set_indices_i, testing_set_indices_i in cv_outer:
            print(iter, i)
            training_set_i = self.X[training_set_indices_i], self.y[training_set_indices_i]
            testing_set_i = self.X[testing_set_indices_i], self.y[testing_set_indices_i]
            svc_model.fit(*training_set_i)
            y_prediction = svc_model.predict(testing_set_i[0])

            orig_stdout = sys.stdout
            f = file('model_svm_classification_report.txt', 'w')
            sys.stdout = f
            print("   classification report:\n%s" % classification_report(testing_set_i[1], y_prediction))
            sys.stdout = orig_stdout
            f.close()

            orig_stdout = sys.stdout
            f = file('model_svm_confusion_matrix.txt', 'w')
            sys.stdout = f
            print("   confusion matrix:\n%s" % confusion_matrix(testing_set_i[1], y_prediction, [0,1,2,3,4,5,6,7,8,9,10,11,12]))
            sys.stdout = orig_stdout
            f.close()
            i+=1

if __name__ == '__main__':
    svm_model = SVM(result_path='')
    svm_model.svm_classifier_cv()
    

